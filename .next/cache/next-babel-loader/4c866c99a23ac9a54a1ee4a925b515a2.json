{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/components/Map.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport L from 'leaflet';\nimport fetch from 'isomorphic-unfetch';\nimport React, { Component } from 'react';\nvar elId = 'map';\nvar _style = {\n  \"default\": {\n    color: '#0055B8',\n    weight: 1,\n    opacity: 1,\n    fillColor: 'red',\n    fillOpacity: 1\n  },\n  hover: {\n    color: '#0055B8',\n    weight: 4,\n    opacity: .6,\n    fillColor: 'red',\n    fillOpacity: 1\n  },\n  selected: {\n    color: '#0055B8',\n    weight: 1,\n    opacity: 1,\n    fillColor: '#0055B8',\n    fillOpacity: 1\n  }\n};\n\nvar Map = /*#__PURE__*/function (_Component) {\n  _inherits(Map, _Component);\n\n  var _super = _createSuper(Map);\n\n  function Map(props) {\n    _classCallCheck(this, Map);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var mapData, map, maakondLayer;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(\"/data/maakonnad.geojson\").then(function (response) {\n                return response.json();\n              }));\n\n            case 2:\n              mapData = _context.sent;\n              console.log(mapData);\n              map = L.map(elId, {\n                attributionControl: false,\n                zoomControl: false,\n                zoomSnap: 0\n              });\n              maakondLayer = L.geoJSON(mapData, {\n                style: function style(feature) {\n                  switch (feature.properties.MNIMI) {\n                    case 'Saare maakond':\n                      return _style.selected;\n\n                    default:\n                      return _style[\"default\"];\n                  }\n                }\n              }).addTo(map);\n              map.fitBounds(maakondLayer.getBounds(), {\n                padding: [0, 0]\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"map\",\n        className: \"map\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 16\n        }\n      });\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/components/Map.js"],"names":["L","fetch","React","Component","elId","style","color","weight","opacity","fillColor","fillOpacity","hover","selected","Map","props","then","response","json","mapData","console","log","map","attributionControl","zoomControl","zoomSnap","maakondLayer","geoJSON","feature","properties","MNIMI","addTo","fitBounds","getBounds","padding"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,CAAP,MAAc,SAAd;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,IAAMC,IAAI,GAAG,KAAb;AAEA,IAAMC,MAAK,GAAG;AACV,aAAS;AACLC,IAAAA,KAAK,EAAE,SADF;AAELC,IAAAA,MAAM,EAAE,CAFH;AAGLC,IAAAA,OAAO,EAAE,CAHJ;AAILC,IAAAA,SAAS,EAAE,KAJN;AAKLC,IAAAA,WAAW,EAAE;AALR,GADC;AAQVC,EAAAA,KAAK,EAAE;AACHL,IAAAA,KAAK,EAAE,SADJ;AAEHC,IAAAA,MAAM,EAAE,CAFL;AAGHC,IAAAA,OAAO,EAAE,EAHN;AAIHC,IAAAA,SAAS,EAAE,KAJR;AAKHC,IAAAA,WAAW,EAAE;AALV,GARG;AAeVE,EAAAA,QAAQ,EAAE;AACNN,IAAAA,KAAK,EAAE,SADD;AAENC,IAAAA,MAAM,EAAE,CAFF;AAGNC,IAAAA,OAAO,EAAE,CAHH;AAINC,IAAAA,SAAS,EAAE,SAJL;AAKNC,IAAAA,WAAW,EAAE;AALP;AAfA,CAAd;;IAwBMG,G;;;;;AACF,eAAYC,KAAZ,EAAmB;AAAA;;AAAA,6BACTA,KADS;AAGlB;;;;;;;;;;;+CAIyBb,KAAK,2BAAL,CAAiCc,IAAjC,CAAsC,UAAAC,QAAQ;AAAA,uBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,eAA9C,C;;;AAAhBC,cAAAA,O;AACNC,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACMG,cAAAA,G,GAAMrB,CAAC,CAACqB,GAAF,CAAMjB,IAAN,EAAY;AACpBkB,gBAAAA,kBAAkB,EAAE,KADA;AAEpBC,gBAAAA,WAAW,EAAE,KAFO;AAGpBC,gBAAAA,QAAQ,EAAE;AAHU,eAAZ,C;AAONC,cAAAA,Y,GAAazB,CAAC,CAAC0B,OAAF,CAAUR,OAAV,EAAmB;AAClCb,gBAAAA,KAAK,EAAE,eAASsB,OAAT,EAAkB;AACrB,0BAAQA,OAAO,CAACC,UAAR,CAAmBC,KAA3B;AACI,yBAAK,eAAL;AAAsB,6BAAOxB,MAAK,CAACO,QAAb;;AACtB;AAAS,6BAAOP,MAAK,WAAZ;AAFb;AAIH;AANiC,eAAnB,EAOZyB,KAPY,CAONT,GAPM,C;AAQnBA,cAAAA,GAAG,CAACU,SAAJ,CAAcN,YAAY,CAACO,SAAb,EAAd,EAAyC;AAACC,gBAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAV,eAAzC;;;;;;;;;;;6BAKK;AACL,aAAO;AAAK,QAAA,EAAE,EAAC,KAAR;AAAc,QAAA,SAAS,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEH;;;;EAjCa9B,S;;AAsClB,eAAeU,GAAf","sourcesContent":["import L from 'leaflet'\nimport fetch from 'isomorphic-unfetch'\nimport React, { Component } from 'react'\n\nconst elId = 'map'\n\nconst style = {\n    default: {\n        color: '#0055B8',\n        weight: 1,\n        opacity: 1,\n        fillColor: 'red',\n        fillOpacity: 1\n    },\n    hover: {\n        color: '#0055B8',\n        weight: 4,\n        opacity: .6,\n        fillColor: 'red',\n        fillOpacity: 1\n    },\n    selected: {\n        color: '#0055B8',\n        weight: 1,\n        opacity: 1,\n        fillColor: '#0055B8',\n        fillOpacity: 1\n    }\n}\n\nclass Map extends Component {\n    constructor(props) {\n        super(props)\n\n    }\n\n    async componentDidMount() {\n\n        const mapData = await fetch(`/data/maakonnad.geojson`).then(response => response.json());\n        console.log(mapData);\n        const map = L.map(elId, {\n            attributionControl: false,\n            zoomControl: false,\n            zoomSnap: 0\n        });\n\n\n        const maakondLayer=L.geoJSON(mapData, {\n            style: function(feature) {\n                switch (feature.properties.MNIMI) {\n                    case 'Saare maakond': return style.selected;\n                    default: return style.default;\n                }\n            }\n            }).addTo(map);\n        map.fitBounds(maakondLayer.getBounds(),  {padding: [0, 0]});\n\n\n    }\n\n    render() {\n        return <div id=\"map\" className=\"map\">\n        </div>\n    }\n\n\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}