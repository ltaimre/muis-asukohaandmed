{"ast":null,"code":"var _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/components/Map.js\";\nvar __jsx = React.createElement;\nimport L from 'leaflet';\nimport fetch from 'isomorphic-unfetch';\nimport React, { Component } from 'react';\nconst elId = 'map';\nconst style = {\n  default: {\n    color: '#0055B8',\n    weight: 1,\n    opacity: 1,\n    fillColor: 'red',\n    fillOpacity: 1\n  },\n  hover: {\n    color: '#0055B8',\n    weight: 4,\n    opacity: .6,\n    fillColor: 'red',\n    fillOpacity: 1\n  },\n  selected: {\n    color: '#0055B8',\n    weight: 1,\n    opacity: 1,\n    fillColor: '#0055B8',\n    fillOpacity: 1\n  }\n};\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: null,\n      map: null,\n      labelFeatures: false,\n      labels: new L.FeatureGroup(),\n      layer: null,\n      cache: {},\n      clickHandler: {\n        region1922: feature => {\n          this.createLayer('kih1922', {\n            filters: [{\n              'PIIRKOND': feature.properties.PIIRKOND\n            }],\n            labels: true\n          });\n        },\n        kih1922: feature => {\n          if (feature.properties.id) {\n            window.location.href = `./${feature.properties.id}`;\n          }\n        }\n      },\n      labelProperty: {\n        region1922: 'PIIRKOND',\n        kih1922: 'KIHELKOND'\n      },\n      labelClass: {\n        region1922: 'label big-label',\n        kih1922: 'label small-label'\n      }\n    };\n  }\n\n  async componentDidMount() {\n    const mapData = await fetch(`/data/maakond.geojson`).then(response => response.json());\n    this.state.map = this.createMap(elId);\n    this.state.layer = L.geoJSON(mapData, {\n      style: style.default\n    });\n    this.state.layer.addTo(this.state.map);\n    this.state.labels.addTo(this.state.map);\n\n    if (this.props.layer) {\n      this.createLayer(this.props.layer, this.props);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"map\",\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 16\n      }\n    });\n  }\n\n  createMap(elId) {\n    const map = L.map(elId, {\n      attributionControl: false,\n      zoomControl: false,\n      zoomSnap: 0\n    }); // disable drag and zoom handlers\n\n    map.dragging.disable();\n    map.touchZoom.disable();\n    map.doubleClickZoom.disable();\n    map.scrollWheelZoom.disable();\n    return map;\n  }\n\n  load(id) {\n    return new Promise((resolve, reject) => {\n      if (id in this.state.cache) {\n        resolve(this.state.cache[id]);\n      } else {\n        fetch(`/data/${id}.geojson`).then(response => response.json()).then(response => {\n          this.state.cache[id] = response;\n          resolve(response);\n        }).catch(reject);\n      }\n    });\n  }\n\n  createLayer(id, options) {\n    this.setState({\n      id: id,\n      labelFeatures: options.labels\n    });\n    this.state.layer.clearLayers();\n    this.state.labels.clearLayers();\n    this.load(id).then(response => {\n      const data = Object.assign({}, response);\n\n      if ('filters' in options && options.filters.length) {\n        data.features = data.features.filter(feature => {\n          const valid = [];\n          options.filters.forEach(item => {\n            Object.keys(item).forEach(key => {\n              if (key in feature.properties) {\n                valid.push(feature.properties[key] === item[key]);\n              }\n            });\n          });\n          return valid.indexOf(true) > -1;\n        });\n      }\n\n      if ('selected' in options && options.selected.length) {\n        data.features = data.features.map(feature => {\n          const valid = [];\n          options.selected.forEach(item => {\n            Object.keys(item).forEach(key => {\n              if (key in feature.properties) {\n                valid.push(feature.properties[key] === item[key]);\n              }\n            });\n          });\n\n          if (valid.indexOf(true) > -1) {\n            feature._selected = true;\n          }\n\n          return feature;\n        });\n      }\n\n      this.state.layer.addData(data);\n      this.state.map.fitBounds(this.state.layer.getBounds(), {\n        padding: [0, 0]\n      });\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/components/Map.js"],"names":["L","fetch","React","Component","elId","style","default","color","weight","opacity","fillColor","fillOpacity","hover","selected","Map","constructor","props","state","id","map","labelFeatures","labels","FeatureGroup","layer","cache","clickHandler","region1922","feature","createLayer","filters","properties","PIIRKOND","kih1922","window","location","href","labelProperty","labelClass","componentDidMount","mapData","then","response","json","createMap","geoJSON","addTo","render","attributionControl","zoomControl","zoomSnap","dragging","disable","touchZoom","doubleClickZoom","scrollWheelZoom","load","Promise","resolve","reject","catch","options","setState","clearLayers","data","Object","assign","length","features","filter","valid","forEach","item","keys","key","push","indexOf","_selected","addData","fitBounds","getBounds","padding"],"mappings":"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","sourcesContent":["import L from 'leaflet'\nimport fetch from 'isomorphic-unfetch'\nimport React, { Component } from 'react'\n\nconst elId = 'map'\n\nconst style = {\n    default: {\n        color: '#0055B8',\n        weight: 1,\n        opacity: 1,\n        fillColor: 'red',\n        fillOpacity: 1\n    },\n    hover: {\n        color: '#0055B8',\n        weight: 4,\n        opacity: .6,\n        fillColor: 'red',\n        fillOpacity: 1\n    },\n    selected: {\n        color: '#0055B8',\n        weight: 1,\n        opacity: 1,\n        fillColor: '#0055B8',\n        fillOpacity: 1\n    }\n}\n\nclass Map extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: null,\n            map: null,\n            labelFeatures: false,\n            labels: new L.FeatureGroup(),\n            layer: null,\n            cache: {},\n            clickHandler: {\n                region1922: feature => {\n                    this.createLayer('kih1922', {\n                        filters: [{'PIIRKOND': feature.properties.PIIRKOND}],\n                        labels: true\n                    })\n                },\n                kih1922: feature => {\n                    if (feature.properties.id) {\n                        window.location.href = `./${feature.properties.id}`\n                    }\n                }\n            },\n            labelProperty: {\n                region1922: 'PIIRKOND',\n                kih1922: 'KIHELKOND'\n            },\n            labelClass: {\n                region1922: 'label big-label',\n                kih1922: 'label small-label'\n            }\n        }\n    }\n\n    async componentDidMount() {\n        const mapData = await fetch(`/data/maakond.geojson`).then(response => response.json());\n\n        this.state.map = this.createMap(elId)\n        this.state.layer = L.geoJSON(mapData, {\n            style: style.default\n        })\n        this.state.layer.addTo(this.state.map)\n        this.state.labels.addTo(this.state.map)\n        if (this.props.layer) {\n            this.createLayer(this.props.layer, this.props)\n        }\n    }\n\n    render() {\n        return <div id=\"map\" className=\"map\">\n        </div>\n    }\n\n\n\n    createMap(elId) {\n        const map = L.map(elId, {\n            attributionControl: false,\n            zoomControl: false,\n            zoomSnap: 0\n        })\n        // disable drag and zoom handlers\n        map.dragging.disable()\n        map.touchZoom.disable()\n        map.doubleClickZoom.disable()\n        map.scrollWheelZoom.disable()\n        return map\n    }\n\n\n\n    load(id) {\n        return new Promise((resolve, reject) => {\n            if (id in this.state.cache) {\n                resolve(this.state.cache[id])\n            } else {\n                fetch(`/data/${id}.geojson`)\n                    .then(response => response.json())\n                    .then(response => {\n                        this.state.cache[id] = response\n                        resolve(response)\n                    })\n                    .catch(reject)\n            }\n        })\n    }\n\n    createLayer(id, options) {\n        this.setState({\n            id: id,\n            labelFeatures: options.labels\n        })\n        this.state.layer.clearLayers()\n        this.state.labels.clearLayers()\n        this.load(id)\n            .then(response => {\n                const data = Object.assign({}, response)\n                if ('filters' in options && options.filters.length) {\n                    data.features = data.features.filter(feature => {\n                        const valid = []\n                        options.filters.forEach(item => {\n                            Object.keys(item).forEach(key => {\n                                if (key in feature.properties) {\n                                    valid.push(feature.properties[key] === item[key])\n                                }\n                            })\n                        })\n                        return valid.indexOf(true) > -1\n                    })\n                }\n                if ('selected' in options && options.selected.length) {\n                    data.features = data.features.map(feature => {\n                        const valid = []\n                        options.selected.forEach(item => {\n                            Object.keys(item).forEach(key => {\n                                if (key in feature.properties) {\n                                    valid.push(feature.properties[key] === item[key])\n                                }\n                            })\n                        })\n                        if (valid.indexOf(true) > -1) {\n                            feature._selected = true\n                        }\n                        return feature\n                    })\n                }\n                this.state.layer.addData(data)\n                this.state.map.fitBounds(this.state.layer.getBounds(), {padding: [0, 0]})\n            })\n    }\n\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}