{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/pages/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport dynamic from 'next/dynamic';\n\nvar rdfetch = require('@rdfjs/fetch');\n/*const Map = dynamic(() => import('../components/Map'), {\n    ssr: false,\n    loading: () => 'Loading...'\n});*/\n\n\nvar Test = function Test(props) {\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, \"Museaale muuseumis: \", props.count), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, \"Museaale valikus: \", props.choice), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, \"Museaale s\\xFCndmusega: \", props.countEvent));\n};\n\nTest.getInitialProps = function getInitialProps(context) {\n  var isIterable, getPlace, hasHigher, isTypeEvent, hasEvent, count, countEvent, choice, array, dataset, _iterator5, _step5, quad, x, hasEv;\n\n  return _regeneratorRuntime.async(function getInitialProps$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          hasEvent = function _hasEvent(link) {\n            var dataset, _iterator4, _step4, quad, isType;\n\n            return _regeneratorRuntime.async(function hasEvent$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(rdfetch(\"\".concat(link), {\n                      headers: {\n                        accept: 'application/rdf+xml'\n                      }\n                    }).then(function (res) {\n                      return res.dataset();\n                    })[\"catch\"](function (err) {\n                      return console.error(err);\n                    }));\n\n                  case 2:\n                    dataset = _context4.sent;\n\n                    if (!isIterable(dataset)) {\n                      _context4.next = 25;\n                      break;\n                    }\n\n                    _iterator4 = _createForOfIteratorHelper(dataset);\n                    _context4.prev = 5;\n\n                    _iterator4.s();\n\n                  case 7:\n                    if ((_step4 = _iterator4.n()).done) {\n                      _context4.next = 17;\n                      break;\n                    }\n\n                    quad = _step4.value;\n\n                    if (!(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P12_occurred_in_the_presence_of\")) {\n                      _context4.next = 15;\n                      break;\n                    }\n\n                    _context4.next = 12;\n                    return _regeneratorRuntime.awrap(isTypeEvent(quad.object.value));\n\n                  case 12:\n                    isType = _context4.sent;\n\n                    if (!isType) {\n                      _context4.next = 15;\n                      break;\n                    }\n\n                    return _context4.abrupt(\"return\", true);\n\n                  case 15:\n                    _context4.next = 7;\n                    break;\n\n                  case 17:\n                    _context4.next = 22;\n                    break;\n\n                  case 19:\n                    _context4.prev = 19;\n                    _context4.t0 = _context4[\"catch\"](5);\n\n                    _iterator4.e(_context4.t0);\n\n                  case 22:\n                    _context4.prev = 22;\n\n                    _iterator4.f();\n\n                    return _context4.finish(22);\n\n                  case 25:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, [[5, 19, 22, 25]], Promise);\n          };\n\n          isTypeEvent = function _isTypeEvent(link) {\n            var dataset, type, place, _iterator3, _step3, quad;\n\n            return _regeneratorRuntime.async(function isTypeEvent$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(rdfetch(\"\".concat(link), {\n                      headers: {\n                        accept: 'application/rdf+xml'\n                      }\n                    }).then(function (res) {\n                      return res.dataset();\n                    })[\"catch\"](function (err) {\n                      return console.error(err);\n                    }));\n\n                  case 2:\n                    dataset = _context3.sent;\n\n                    if (!isIterable(dataset)) {\n                      _context3.next = 26;\n                      break;\n                    }\n\n                    type = 0;\n                    place = 0;\n                    _iterator3 = _createForOfIteratorHelper(dataset);\n                    _context3.prev = 7;\n\n                    _iterator3.s();\n\n                  case 9:\n                    if ((_step3 = _iterator3.n()).done) {\n                      _context3.next = 18;\n                      break;\n                    }\n\n                    quad = _step3.value;\n\n                    if (quad.object.value == \"http://opendata.muis.ee/thesaurus/61/11273\") {\n                      //console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`);\n                      type = 1;\n                    }\n\n                    if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P7_took_place_at\") {\n                      //console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`);\n                      place = quad.object.value;\n                    }\n\n                    if (!(type && place)) {\n                      _context3.next = 16;\n                      break;\n                    }\n\n                    getPlace(quad.object.value);\n                    return _context3.abrupt(\"return\", true);\n\n                  case 16:\n                    _context3.next = 9;\n                    break;\n\n                  case 18:\n                    _context3.next = 23;\n                    break;\n\n                  case 20:\n                    _context3.prev = 20;\n                    _context3.t0 = _context3[\"catch\"](7);\n\n                    _iterator3.e(_context3.t0);\n\n                  case 23:\n                    _context3.prev = 23;\n\n                    _iterator3.f();\n\n                    return _context3.finish(23);\n\n                  case 26:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, [[7, 20, 23, 26]], Promise);\n          };\n\n          hasHigher = function _hasHigher(link) {\n            var dataset, _iterator2, _step2, quad;\n\n            return _regeneratorRuntime.async(function hasHigher$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(rdfetch(\"\".concat(link), {\n                      headers: {\n                        accept: 'application/rdf+xml'\n                      }\n                    }).then(function (res) {\n                      return res.dataset();\n                    })[\"catch\"](function (err) {\n                      return console.error(err);\n                    }));\n\n                  case 2:\n                    dataset = _context2.sent;\n\n                    if (isIterable(dataset)) {\n                      //\n                      _iterator2 = _createForOfIteratorHelper(dataset);\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          quad = _step2.value;\n\n                          if (quad.object.value == \"http://www.cidoc-crm.org/cidoc-crm/P127_has_broader_term\") {\n                            console.log(\"subjekt: \".concat(quad.subject.value, \", predikaat: \").concat(quad.predicate.value, \" objekt: \").concat(quad.object.value));\n                          }\n                        }\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n                    }\n\n                  case 4:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          getPlace = function _getPlace(link) {\n            var dataset, _iterator, _step, quad;\n\n            return _regeneratorRuntime.async(function getPlace$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _regeneratorRuntime.awrap(rdfetch(\"\".concat(link), {\n                      headers: {\n                        accept: 'application/rdf+xml'\n                      }\n                    }).then(function (res) {\n                      return res.dataset();\n                    })[\"catch\"](function (err) {\n                      return console.error(err);\n                    }));\n\n                  case 2:\n                    dataset = _context.sent;\n\n                    if (isIterable(dataset)) {\n                      //\n                      _iterator = _createForOfIteratorHelper(dataset);\n\n                      try {\n                        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                          quad = _step.value;\n                          console.log(\"subjekt: \".concat(quad.subject.value, \", predikaat: \").concat(quad.predicate.value, \" objekt: \").concat(quad.object.value));\n                        }\n                      } catch (err) {\n                        _iterator.e(err);\n                      } finally {\n                        _iterator.f();\n                      }\n                    }\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          isIterable = function _isIterable(obj) {\n            if (obj == null) {\n              return false;\n            }\n\n            return typeof obj[Symbol.iterator] === 'function';\n          };\n\n          count = 0;\n          countEvent = 0;\n          choice = 50;\n          array = [];\n          _context5.next = 11;\n          return _regeneratorRuntime.awrap(rdfetch('http://www.muis.ee/rdf/objects-by-museum/34191', {\n            headers: {\n              accept: 'application/rdf+xml'\n            }\n          }).then(function (res) {\n            return res.dataset();\n          })[\"catch\"](function (err) {\n            return console.error(err);\n          }));\n\n        case 11:\n          dataset = _context5.sent;\n\n          if (isIterable(dataset)) {\n            _iterator5 = _createForOfIteratorHelper(dataset);\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                quad = _step5.value;\n\n                if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\") {\n                  array.push(quad.object.value);\n                  count++;\n                }\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n\n          x = 0;\n\n        case 14:\n          if (!(x < choice)) {\n            _context5.next = 22;\n            break;\n          }\n\n          _context5.next = 17;\n          return _regeneratorRuntime.awrap(hasEvent(array[x]));\n\n        case 17:\n          hasEv = _context5.sent;\n\n          if (hasEv) {\n            countEvent++;\n          }\n\n        case 19:\n          x++;\n          _context5.next = 14;\n          break;\n\n        case 22:\n          return _context5.abrupt(\"return\", {\n            count: count,\n            choice: choice,\n            countEvent: countEvent\n          });\n\n        case 23:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/pages/index.js"],"names":["React","dynamic","rdfetch","require","Test","props","count","choice","countEvent","getInitialProps","context","isIterable","getPlace","hasHigher","isTypeEvent","hasEvent","link","headers","accept","then","res","dataset","err","console","error","quad","predicate","value","object","isType","type","place","log","subject","obj","Symbol","iterator","array","push","x","hasEv"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dynamic from 'next/dynamic'\nconst rdfetch = require('@rdfjs/fetch');\n/*const Map = dynamic(() => import('../components/Map'), {\n    ssr: false,\n    loading: () => 'Loading...'\n});*/\n\n\nconst Test= props => (\n\n    <React.Fragment>\n        <p>Museaale muuseumis: {props.count}</p>\n        <p>Museaale valikus: {props.choice}</p>\n        <p>Museaale sündmusega: {props.countEvent}</p>\n\n    </React.Fragment>\n);\n\n\n\n   Test.getInitialProps = async function getInitialProps (context) {\n\n       function isIterable(obj) {\n           if (obj == null) {\n               return false;\n           }\n           return typeof obj[Symbol.iterator] === 'function';\n       }\n\n       async function getPlace(link) {\n           const dataset = await rdfetch(`${link}`, {\n               headers: {\n                   accept: 'application/rdf+xml'\n               }\n           })\n               .then(res => res.dataset())\n               .catch(err => console.error(err));\n           if(isIterable(dataset)) {\n               //\n               for (const quad of dataset) {\n\n                       console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`)\n                   }\n\n\n               }\n           }\n\n\n       async function hasHigher(link) {\n           const dataset = await rdfetch(`${link}`, {\n               headers: {\n                   accept: 'application/rdf+xml'\n               }\n           })\n               .then(res => res.dataset())\n               .catch(err => console.error(err));\n           if(isIterable(dataset)) {\n                //\n           for (const quad of dataset) {\n               if(quad.object.value == \"http://www.cidoc-crm.org/cidoc-crm/P127_has_broader_term\" ) {\n                   console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`)\n               }\n\n\n       }\n           }\n       }\n\n\n       async function isTypeEvent(link) {\n           const dataset = await rdfetch(`${link}`, {\n               headers: {\n                   accept: 'application/rdf+xml'\n               }\n           })\n               .then(res => res.dataset())\n               .catch(err => console.error(err));\n            if(isIterable(dataset)) {\n                let type = 0;\n                let place = 0;\n                for (const quad of dataset) {\n                    if(quad.object.value == \"http://opendata.muis.ee/thesaurus/61/11273\" ) {\n                        //console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`);\n                        type = 1;\n                    }\n                    if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P7_took_place_at\" ) {\n                        //console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`);\n\n                        place = quad.object.value;\n                    }\n\n                    if(type && place ) {\n                        getPlace(quad.object.value);\n                        return true;\n                    }\n\n               /*   else{\n                        if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P2_has_type \" ) {\n                            console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`);\n                            return true;\n                        }\n                           //hasHigher(quad.object.value);\n\n                       }*/\n\n\n                }\n\n\n            }\n\n\n       }\n\n       async function hasEvent(link) {\n          const dataset = await rdfetch(`${link}`, {\n              headers: {\n                  accept: 'application/rdf+xml'\n              }\n          })\n               .then(res => res.dataset())\n               .catch(err => console.error(err));\n           if(isIterable(dataset)) {\n           for (const quad of dataset) {\n               if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P12_occurred_in_the_presence_of\" ) {\n                   { let isType = await isTypeEvent(quad.object.value);\n                       if(isType) {\n                           return true;\n                       }\n\n                   }\n\n\n               }\n           }\n           }\n       }\n\n\n\n\n       let count = 0;\n       let countEvent = 0;\n       const choice = 50;\n       const array = [];\n\n        const dataset = await rdfetch('http://www.muis.ee/rdf/objects-by-museum/34191', {\n           headers: {\n               accept: 'application/rdf+xml'\n           }\n       }).then(res => res.dataset()).catch(err => console.error(err));\n\n\n        if(isIterable(dataset)) {\n            for (const quad of dataset) {\n                   if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\")\n                   { array.push(quad.object.value);\n                       count ++\n                   }\n               }\n           }\n\n\n\n      for (let x = 0; x<choice; x++) {\n           { let hasEv = await hasEvent(array[x]);\n               if(hasEv) {\n                   countEvent++\n               }\n\n           }\n\n\n       }\n\n\n\n\n       return {count, choice, countEvent};\n    };\n\n\n\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}