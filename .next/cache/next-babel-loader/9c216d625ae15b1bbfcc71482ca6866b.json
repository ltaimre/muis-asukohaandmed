{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/components/Map.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport L from 'leaflet';\nimport fetch from 'isomorphic-unfetch';\nimport React, { Component } from 'react';\nvar elId = 'map';\nvar style = {\n  \"default\": {\n    color: '#0055B8',\n    weight: 1,\n    opacity: 1,\n    fillColor: 'red',\n    fillOpacity: 1\n  },\n  hover: {\n    color: '#0055B8',\n    weight: 4,\n    opacity: .6,\n    fillColor: 'red',\n    fillOpacity: 1\n  },\n  selected: {\n    color: '#0055B8',\n    weight: 1,\n    opacity: 1,\n    fillColor: '#0055B8',\n    fillOpacity: 1\n  }\n};\n\nvar Map = /*#__PURE__*/function (_Component) {\n  _inherits(Map, _Component);\n\n  var _super = _createSuper(Map);\n\n  function Map(props) {\n    _classCallCheck(this, Map);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var mapData, mapData2, mapData3, mapData4, map, myStyle, myLayer, myLayer2;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(\"/data/maakond.geojson\").then(function (response) {\n                return response.json();\n              }));\n\n            case 2:\n              mapData = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(fetch(\"/data/kih1922.geojson\").then(function (response) {\n                return response.json();\n              }));\n\n            case 5:\n              mapData2 = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(fetch(\"/data/region1922.geojson\").then(function (response) {\n                return response.json();\n              }));\n\n            case 8:\n              mapData3 = _context.sent;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(fetch(\"/data/mk.geojson\").then(function (response) {\n                return response.json();\n              }));\n\n            case 11:\n              mapData4 = _context.sent;\n              console.log(mapData);\n              console.log(mapData2);\n              console.log(mapData3);\n              console.log(mapData4);\n              map = L.map(elId, {\n                attributionControl: false,\n                zoomControl: false,\n                zoomSnap: 0\n              });\n              myStyle = {\n                \"color\": \"#ff7800\",\n                \"weight\": 5,\n                \"opacity\": 0.65\n              };\n              myLayer = L.geoJSON(mapData2, {\n                style: myStyle\n              }).addTo(map);\n              myLayer2 = L.geoJSON(mapData3, {\n                style: style[\"default\"]\n              }).addTo(map);\n              map.fitBounds(myLayer.getBounds(), {\n                padding: [0, 0]\n              });\n              /* const layer = L.GeoJSON(mapData, {\n                     style: myStyle\n                 }).addTo(map);*/\n              // Fit map to bounds of your GeoJSON\n              // map.fitBounds(layer.getBounds())\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        style: {\n          height: 500,\n          width: 500\n        },\n        id: \"map\",\n        className: \"map\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"createMap\",\n    value: function createMap(elId) {\n      // disable drag and zoom handlers\n      map.dragging.disable();\n      map.touchZoom.disable();\n      map.doubleClickZoom.disable();\n      map.scrollWheelZoom.disable();\n      return map;\n    }\n  }, {\n    key: \"createLayer\",\n    value: function createLayer(id, options) {\n      var _this = this;\n\n      this.setState({\n        id: id,\n        labelFeatures: options.labels\n      });\n      this.state.layer.clearLayers();\n      this.state.labels.clearLayers();\n      this.load(id).then(function (response) {\n        var data = Object.assign({}, response);\n\n        if ('filters' in options && options.filters.length) {\n          data.features = data.features.filter(function (feature) {\n            var valid = [];\n            options.filters.forEach(function (item) {\n              Object.keys(item).forEach(function (key) {\n                if (key in feature.properties) {\n                  valid.push(feature.properties[key] === item[key]);\n                }\n              });\n            });\n            return valid.indexOf(true) > -1;\n          });\n        }\n\n        if ('selected' in options && options.selected.length) {\n          data.features = data.features.map(function (feature) {\n            var valid = [];\n            options.selected.forEach(function (item) {\n              Object.keys(item).forEach(function (key) {\n                if (key in feature.properties) {\n                  valid.push(feature.properties[key] === item[key]);\n                }\n              });\n            });\n\n            if (valid.indexOf(true) > -1) {\n              feature._selected = true;\n            }\n\n            return feature;\n          });\n        }\n\n        _this.state.layer.addData(data);\n\n        _this.state.map.fitBounds(_this.state.layer.getBounds(), {\n          padding: [0, 0]\n        });\n      });\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/components/Map.js"],"names":["L","fetch","React","Component","elId","style","color","weight","opacity","fillColor","fillOpacity","hover","selected","Map","props","then","response","json","mapData","mapData2","mapData3","mapData4","console","log","map","attributionControl","zoomControl","zoomSnap","myStyle","myLayer","geoJSON","addTo","myLayer2","fitBounds","getBounds","padding","height","width","dragging","disable","touchZoom","doubleClickZoom","scrollWheelZoom","id","options","setState","labelFeatures","labels","state","layer","clearLayers","load","data","Object","assign","filters","length","features","filter","feature","valid","forEach","item","keys","key","properties","push","indexOf","_selected","addData"],"mappings":"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","sourcesContent":["import L from 'leaflet'\nimport fetch from 'isomorphic-unfetch'\nimport React, { Component } from 'react'\n\nconst elId = 'map'\n\nconst style = {\n    default: {\n        color: '#0055B8',\n        weight: 1,\n        opacity: 1,\n        fillColor: 'red',\n        fillOpacity: 1\n    },\n    hover: {\n        color: '#0055B8',\n        weight: 4,\n        opacity: .6,\n        fillColor: 'red',\n        fillOpacity: 1\n    },\n    selected: {\n        color: '#0055B8',\n        weight: 1,\n        opacity: 1,\n        fillColor: '#0055B8',\n        fillOpacity: 1\n    }\n}\n\nclass Map extends Component {\n    constructor(props) {\n        super(props)\n\n    }\n\n    async componentDidMount() {\n        const mapData = await fetch(`/data/maakond.geojson`).then(response => response.json());\n        const mapData2 = await fetch(`/data/kih1922.geojson`).then(response => response.json());\n        const mapData3 = await fetch(`/data/region1922.geojson`).then(response => response.json());\n        const mapData4 = await fetch(`/data/mk.geojson`).then(response => response.json());\n        console.log(mapData);\n        console.log(mapData2);\n        console.log(mapData3);\n        console.log(mapData4);\n        const map = L.map(elId, {\n            attributionControl: false,\n            zoomControl: false,\n            zoomSnap: 0\n        });\n\n\n\n        const myStyle = {\n            \"color\": \"#ff7800\",\n            \"weight\": 5,\n            \"opacity\": 0.65\n        };\n\n\n\n        const myLayer=L.geoJSON(mapData2, {\n            style: myStyle\n        }).addTo(map);\n        const myLayer2=L.geoJSON(mapData3, {\n            style: style.default\n        }).addTo(map);\n        map.fitBounds(myLayer.getBounds(),  {padding: [0, 0]});\n\n\n\n     /* const layer = L.GeoJSON(mapData, {\n            style: myStyle\n        }).addTo(map);*/\n        // Fit map to bounds of your GeoJSON\n       // map.fitBounds(layer.getBounds())\n    }\n\n    render() {\n        return <div style={{height: 500, width: 500 }} id=\"map\" className=\"map\">\n        </div>\n    }\n\n\n\n    createMap(elId) {\n\n        // disable drag and zoom handlers\n        map.dragging.disable()\n        map.touchZoom.disable()\n        map.doubleClickZoom.disable()\n        map.scrollWheelZoom.disable()\n        return map\n    }\n\n\n\n\n\n    createLayer(id, options) {\n        this.setState({\n            id: id,\n            labelFeatures: options.labels\n        })\n        this.state.layer.clearLayers()\n        this.state.labels.clearLayers()\n        this.load(id)\n            .then(response => {\n                const data = Object.assign({}, response)\n                if ('filters' in options && options.filters.length) {\n                    data.features = data.features.filter(feature => {\n                        const valid = []\n                        options.filters.forEach(item => {\n                            Object.keys(item).forEach(key => {\n                                if (key in feature.properties) {\n                                    valid.push(feature.properties[key] === item[key])\n                                }\n                            })\n                        })\n                        return valid.indexOf(true) > -1\n                    })\n                }\n                if ('selected' in options && options.selected.length) {\n                    data.features = data.features.map(feature => {\n                        const valid = []\n                        options.selected.forEach(item => {\n                            Object.keys(item).forEach(key => {\n                                if (key in feature.properties) {\n                                    valid.push(feature.properties[key] === item[key])\n                                }\n                            })\n                        })\n                        if (valid.indexOf(true) > -1) {\n                            feature._selected = true\n                        }\n                        return feature\n                    })\n                }\n                this.state.layer.addData(data)\n                this.state.map.fitBounds(this.state.layer.getBounds(), {padding: [0, 0]})\n            })\n    }\n\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}