{"ast":null,"code":"var _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport dynamic from 'next/dynamic';\n\nconst rdfetch = require('@rdfjs/fetch');\n/*const Map = dynamic(() => import('../components/Map'), {\n    ssr: false,\n    loading: () => 'Loading...'\n});*/\n\n\nconst Test = props => __jsx(React.Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}, __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }\n}, \"Museaale muuseumis: \", props.count), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }\n}, \"Museaale valikus: \", props.choice), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }\n}, \"Museaale s\\xFCndmusega: \", props.countEvent));\n\nTest.getInitialProps = async function getInitialProps(context) {\n  async function hasHigher(link) {\n    const res = await rdfetch(`${link}`, {\n      headers: {\n        accept: 'application/rdf+xml'\n      }\n    });\n    const dataset = await res.dataset();\n\n    for (const quad of dataset) {\n      console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`);\n    }\n  }\n\n  async function isTypeEvent(link) {\n    const res = await rdfetch(`${link}`, {\n      headers: {\n        accept: 'application/rdf+xml'\n      }\n    });\n\n    if (res) {\n      const dataset = await res.dataset();\n\n      if (dataset) {\n        for (const quad of dataset) {\n          if (quad.object.value == \"http://opendata.muis.ee/thesaurus/61/11273\") {\n            return true;\n          } else {\n            hasHigher(quad.object.value);\n          }\n        }\n      }\n    }\n  }\n\n  async function hasEvent(link) {\n    const res = await rdfetch(`${link}`, {\n      headers: {\n        accept: 'application/rdf+xml'\n      }\n    });\n    const dataset = await res.dataset();\n\n    for (const quad of dataset) {\n      if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P12_occurred_in_the_presence_of\") {\n        {\n          let isType = await isTypeEvent(quad.object.value);\n\n          if (isType) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  const res = await rdfetch('http://www.muis.ee/rdf/objects-by-museum/34191', {\n    headers: {\n      accept: 'application/rdf+xml'\n    }\n  });\n  const dataset = await res.dataset();\n  let count = 0;\n  let countEvent = 0;\n  const choice = 50;\n  const array = [];\n\n  for (const quad of dataset) {\n    if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\") {\n      array.push(quad.object.value);\n      count++;\n    }\n  }\n\n  for (let x = 0; x < choice; x++) {\n    {\n      let hasEv = await hasEvent(array[x]);\n\n      if (hasEv) {\n        countEvent++;\n      }\n    }\n  }\n\n  return {\n    count,\n    choice,\n    countEvent\n  };\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/pages/index.js"],"names":["React","dynamic","rdfetch","require","Test","props","count","choice","countEvent","getInitialProps","context","hasHigher","link","res","headers","accept","dataset","quad","console","log","subject","value","predicate","object","isTypeEvent","hasEvent","isType","array","push","x","hasEv"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dynamic from 'next/dynamic'\nconst rdfetch = require('@rdfjs/fetch');\n/*const Map = dynamic(() => import('../components/Map'), {\n    ssr: false,\n    loading: () => 'Loading...'\n});*/\n\n\nconst Test= props => (\n\n    <React.Fragment>\n        <p>Museaale muuseumis: {props.count}</p>\n        <p>Museaale valikus: {props.choice}</p>\n        <p>Museaale s√ºndmusega: {props.countEvent}</p>\n\n    </React.Fragment>\n);\n\n\n\n   Test.getInitialProps = async function getInitialProps (context) {\n\n       async function hasHigher(link) {\n           const res = await rdfetch(`${link}`, {\n               headers: {\n                   accept: 'application/rdf+xml'\n               }\n           });\n           const dataset = await res.dataset();\n\n           for (const quad of dataset) {\n\n               console.log(`subjekt: ${quad.subject.value}, predikaat: ${quad.predicate.value} objekt: ${quad.object.value}`)\n       }\n       }\n\n\n       async function isTypeEvent(link) {\n               const res = await rdfetch(`${link}`, {\n                   headers: {\n                       accept: 'application/rdf+xml'\n                   }\n               });\n               if(res){\n                   const dataset = await res.dataset();\n                   if(dataset) {\n                       for (const quad of dataset) {\n                           if(quad.object.value == \"http://opendata.muis.ee/thesaurus/61/11273\" ) {\n                               return true;\n                           }\n                           else{\n                               hasHigher(quad.object.value);\n                           }\n\n                       }\n\n                   }\n\n               }\n\n\n       }\n\n       async function hasEvent(link) {\n               const res = await rdfetch(`${link}`, {\n                   headers: {\n                       accept: 'application/rdf+xml'\n                   }\n               });\n               const dataset = await res.dataset();\n\n               for (const quad of dataset) {\n                   if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P12_occurred_in_the_presence_of\" ) {\n                       { let isType = await isTypeEvent(quad.object.value);\n                           if(isType) {\n                               return true;\n                           }\n\n                       }\n\n\n                   }\n\n               }\n           }\n\n       const res = await rdfetch('http://www.muis.ee/rdf/objects-by-museum/34191', {\n            headers: {\n                accept: 'application/rdf+xml'\n            }\n        });\n       const dataset = await res.dataset();\n       let count = 0;\n       let countEvent = 0;\n       const choice = 50;\n       const array = [];\n       for (const quad of dataset) {\n            if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\")\n            { array.push(quad.object.value);\n                count ++\n\n            }\n\n\n      }\n\n      for (let x = 0; x<choice; x++) {\n           { let hasEv = await hasEvent(array[x]);\n               if(hasEv) {\n                   countEvent++\n               }\n\n           }\n\n\n       }\n\n\n\n\n       return {count, choice, countEvent};\n    };\n\n\n\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}