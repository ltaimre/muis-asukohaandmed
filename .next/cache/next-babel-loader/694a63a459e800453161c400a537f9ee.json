{"ast":null,"code":"var _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport MuseumInfo from \"../components/MuseumInfo\";\n\nconst rdfetch = require('@rdfjs/fetch');\n\nconst Test = props => __jsx(React.Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }\n}, __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }\n}, \"Museaale muuseumis: \", props.count), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }\n}, \"Museaale valikus: \", props.choice), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }\n}, \"Museaale s\\xFCndmusega: \", props.countEvent));\n\nTest.getInitialProps = async function getInitialProps(context) {\n  async function getDataset(link) {\n    const dataset = await rdfetch(`${link}`).then(res => res.dataset()).catch(err => console.error(err));\n    return dataset;\n  }\n\n  function isIterable(obj) {\n    if (obj == null) {\n      return false;\n    }\n\n    return typeof obj[Symbol.iterator] === 'function';\n  }\n\n  async function checkHigherPlace(link) {\n    const dataset = getDataset(link);\n\n    if (isIterable(dataset)) {\n      for (const quad of dataset) {\n        if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P87_falls_within\") {\n          if (quad.object.value == \"http://opendata.muis.ee/place/6218\") {\n            return true;\n          } else {}\n        }\n      }\n    }\n  }\n\n  async function getPlace(link) {\n    const dataset = getDataset(link);\n\n    if (isIterable(dataset)) {\n      //\n      for (const quad of dataset) {//check if is already\n      }\n    }\n  }\n\n  async function hasHigher(link) {\n    const dataset = getDataset(link);\n\n    if (isIterable(dataset)) {\n      //\n      for (const quad of dataset) {\n        if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P127_has_broader_term\") {\n          if (quad.object.value == \"http://opendata.muis.ee/thesaurus/61/11273\") {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  async function isTypeEvent(link) {\n    const dataset = getDataset(link);\n\n    if (isIterable(dataset)) {\n      let type = 0;\n      let place = [];\n\n      for (const quad of dataset) {\n        if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P2_has_type\") {\n          if (quad.object.value == \"http://opendata.muis.ee/thesaurus/61/11273\") {\n            type = 1;\n          } else {\n            let a = await hasHigher(quad.object.value);\n\n            if (a) {\n              type = 1;\n            }\n          }\n        }\n\n        if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P7_took_place_at\") {\n          place.push(quad.object.value);\n        }\n      }\n\n      if (type && place.length) {\n        for (let x = 0; x < place.length; x++) {//getPlace(place[x]);\n        }\n\n        return true;\n      }\n    }\n  }\n\n  async function hasEvent(link) {\n    const dataset = getDataset(link);\n\n    if (isIterable(dataset)) {\n      for (const quad of dataset) {\n        if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P12_occurred_in_the_presence_of\") {\n          {\n            let isType = await isTypeEvent(quad.object.value);\n\n            if (isType) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  let count = 0;\n  let countEvent = 0;\n  const choice = 188;\n  const array = []; //Jääri ajaloolised 1204\n  //Jääri fotod: 1252\n  //Jööri ajaloolised: 1238\n  //Meierei: 1210\n  //Pudukogu 1198\n  //Alver - ajalooline 392\n\n  const dataset = await getDataset('https://www.muis.ee/rdf/collection/1210');\n\n  if (isIterable(dataset)) {\n    for (const quad of dataset) {\n      if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\") {\n        array.push(quad.object.value);\n        count++;\n      }\n    }\n  }\n\n  for (let x = 0; x < array.length; x++) {\n    {\n      let hasEv = await hasEvent(array[x]);\n\n      if (hasEv) {\n        countEvent++;\n      }\n    }\n  }\n\n  return {\n    count,\n    choice,\n    countEvent\n  };\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/pages/index.js"],"names":["React","MuseumInfo","rdfetch","require","Test","props","count","choice","countEvent","getInitialProps","context","getDataset","link","dataset","then","res","catch","err","console","error","isIterable","obj","Symbol","iterator","checkHigherPlace","quad","predicate","value","object","getPlace","hasHigher","isTypeEvent","type","place","a","push","length","x","hasEvent","isType","array","hasEv"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MuseumInfo from \"../components/MuseumInfo\";\nconst rdfetch = require('@rdfjs/fetch');\n\n\n\nconst Test= props => (\n\n    <React.Fragment>\n\n        <p>Museaale muuseumis: {props.count}</p>\n        <p>Museaale valikus: {props.choice}</p>\n        <p>Museaale sündmusega: {props.countEvent}</p>\n\n    </React.Fragment>\n);\n\n\n\n\n   Test.getInitialProps = async function getInitialProps (context) {\n\n       async function getDataset(link) {\n           const dataset = await rdfetch(`${link}`)\n               .then(res => res.dataset())\n               .catch(err => console.error(err));\n           return dataset;\n       }\n\n       function isIterable(obj) {\n           if (obj == null) {\n               return false;\n           }\n           return typeof obj[Symbol.iterator] === 'function';\n       }\n\n       async function checkHigherPlace(link) {\n\n           const dataset = getDataset(link);\n           if(isIterable(dataset)) {\n\n               for (const quad of dataset) {\n                   if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P87_falls_within\")\n                   {\n                       if(quad.object.value == \"http://opendata.muis.ee/place/6218\") {\n                           return true\n                       }\n                       else {\n\n                       }\n\n\n               }\n\n\n           }\n       }\n\n\n\n       }\n\n       async function getPlace(link) {\n           const dataset = getDataset(link);\n           if(isIterable(dataset)) {\n               //\n               for (const quad of dataset) {\n                 //check if is already\n               }\n\n               }\n           }\n\n\n       async function hasHigher(link) {\n           const dataset = getDataset(link);\n           if(isIterable(dataset)) {\n                //\n           for (const quad of dataset) {\n               if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P127_has_broader_term\"  ) {\n\n                   if(quad.object.value == \"http://opendata.muis.ee/thesaurus/61/11273\" ) {\n                       return true;\n                   }\n               }\n       }\n           }\n       }\n\n\n       async function isTypeEvent(link) {\n           const dataset = getDataset(link);\n            if(isIterable(dataset)) {\n                let type = 0;\n                let place = [];\n                for (const quad of dataset) {\n                    if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P2_has_type\" ) {\n                        if(quad.object.value == \"http://opendata.muis.ee/thesaurus/61/11273\" ) {\n                            type = 1;\n                        }\n                        else {\n                          let a = await hasHigher(quad.object.value);\n                          if(a){\n                              type = 1;\n                          }\n                        }\n                    }\n                    if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P7_took_place_at\" ) {\n                        place.push(quad.object.value);\n                    }\n                }\n\n                    if(type && place.length ) {\n                        for(let x=0; x < place.length;  x++) {\n                            //getPlace(place[x]);\n                        }\n\n                        return true;\n                    }\n            }\n\n\n       }\n\n       async function hasEvent(link) {\n          const dataset = getDataset(link);\n           if(isIterable(dataset)) {\n           for (const quad of dataset) {\n               if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P12_occurred_in_the_presence_of\" ) {\n                   { let isType = await isTypeEvent(quad.object.value);\n                       if(isType) {\n                           return true;\n                       }\n\n                   }\n\n               }\n           }\n           }\n       }\n\n\n\n\n       let count = 0;\n       let countEvent = 0;\n       const choice = 188;\n       const array = [];\n\n       //Jääri ajaloolised 1204\n       //Jääri fotod: 1252\n       //Jööri ajaloolised: 1238\n       //Meierei: 1210\n       //Pudukogu 1198\n       //Alver - ajalooline 392\n\n\n        const dataset = await getDataset('https://www.muis.ee/rdf/collection/1210');\n        if(isIterable(dataset)) {\n            for (const quad of dataset) {\n                   if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\")\n                   { array.push(quad.object.value);\n                       count ++\n                   }\n               }\n           }\n\n\n\n      for (let x = 0; x<array.length; x++) {\n           { let hasEv = await hasEvent(array[x]);\n               if(hasEv) {\n                   countEvent++\n               }\n           }\n       }\n       return {count, choice, countEvent};\n    };\n\n\n\n\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}