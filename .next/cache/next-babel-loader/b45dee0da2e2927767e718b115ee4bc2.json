{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/pages/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\n\nvar rdfetch = require('@rdfjs/fetch');\n\nvar Test = function Test(props) {\n  return __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, \"Proov\");\n};\n\nTest.getInitialProps = function _callee(context) {\n  var a, main;\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          main = function _main() {\n            var res, dataset, _iterator, _step, quad;\n\n            return _regeneratorRuntime.async(function main$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(rdfetch('http://www.muis.ee/rdf/objects-by-museum/145873', {\n                      headers: {\n                        accept: 'application/rdf+xml'\n                      }\n                    }));\n\n                  case 3:\n                    res = _context.sent;\n                    _context.next = 6;\n                    return _regeneratorRuntime.awrap(res.dataset());\n\n                  case 6:\n                    dataset = _context.sent;\n                    _iterator = _createForOfIteratorHelper(dataset);\n\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        quad = _step.value;\n                        if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\") //console.log(\"subjekt: \" + quad.subject.value + ' predikaat: ' + quad.predicate.value + ' objekt: ' + quad.object.value)\n                          console.log(' objekt: ' + quad.object.value);\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n\n                    _context.next = 14;\n                    break;\n\n                  case 11:\n                    _context.prev = 11;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.error(_context.t0);\n\n                  case 14:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0, 11]], Promise);\n          };\n\n          a = [\"sinisilm\"];\n          main();\n          return _context2.abrupt(\"return\", {\n            a: a\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/pages/index.js"],"names":["React","rdfetch","require","Test","props","getInitialProps","context","main","headers","accept","res","dataset","quad","predicate","value","console","log","object","error","a"],"mappings":";;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,SACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADc;AAAA,CAAlB;;AAIAD,IAAI,CAACE,eAAL,GAAuB,iBAAgBC,OAAhB;AAAA,SAENC,IAFM;AAAA;AAAA;AAAA;AAAA;AAENA,UAAAA,IAFM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAION,OAAO,CAAC,iDAAD,EAAoD;AACzEO,sBAAAA,OAAO,EAAE;AACLC,wBAAAA,MAAM,EAAE;AADH;AADgE,qBAApD,CAJd;;AAAA;AAILC,oBAAAA,GAJK;AAAA;AAAA,qDAUWA,GAAG,CAACC,OAAJ,EAVX;;AAAA;AAULA,oBAAAA,OAVK;AAAA,2DAYQA,OAZR;;AAAA;AAYX,0EAA4B;AAAjBC,wBAAAA,IAAiB;AACxB,4BAAGA,IAAI,CAACC,SAAL,CAAeC,KAAf,IAAwB,uDAA3B,EACA;AACIC,0BAAAA,OAAO,CAACC,GAAR,CAAY,cAAcJ,IAAI,CAACK,MAAL,CAAYH,KAAtC;AACP;AAhBU;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBXC,oBAAAA,OAAO,CAACG,KAAR;;AAlBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACbC,UAAAA,CADa,GACT,CAAC,UAAD,CADS;AAwBnBZ,UAAAA,IAAI;AAxBe,4CA0BZ;AAACY,YAAAA,CAAC,EAADA;AAAD,WA1BY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AA4BA,eAAehB,IAAf","sourcesContent":["\nimport React from 'react';\nconst rdfetch = require('@rdfjs/fetch');\nconst Test = props => (\n    <p>Proov</p>\n);\n\nTest.getInitialProps = async function (context) {\n    const a = [\"sinisilm\"];\n  async function main () {\n        try {\n            const res = await rdfetch('http://www.muis.ee/rdf/objects-by-museum/145873', {\n                headers: {\n                    accept: 'application/rdf+xml'\n                }\n            })\n\n            const dataset = await res.dataset();\n\n            for (const quad of dataset) {\n                if(quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\")\n                //console.log(\"subjekt: \" + quad.subject.value + ' predikaat: ' + quad.predicate.value + ' objekt: ' + quad.object.value)\n                    console.log(' objekt: ' + quad.object.value);\n            }\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n\n\n    main();\n\n    return {a};\n};\nexport default Test\n"]},"metadata":{},"sourceType":"module"}