{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/pages/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\n\nvar fetch = require('@rdfjs/fetch');\n\nvar Test = function Test(props) {\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 1\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, \"Proov\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, props.count));\n};\n\nTest.getInitialProps = function _callee(context) {\n  var label, count;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          label = 'http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of';\n          count = 0;\n          fetch('http://www.muis.ee/rdf/objects-by-museum/34711', {\n            headers: {\n              accept: 'application/rdf+xml'\n            }\n          }).then(function (res) {\n            return res.dataset();\n          }).then(function (dataset) {\n            var _iterator = _createForOfIteratorHelper(dataset),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var quad = _step.value;\n\n                if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\") {\n                  console.log(\"\".concat(quad.subject.value, \": \").concat(quad.object.value));\n                  count++;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          })[\"catch\"](function (err) {\n            return console.error(err);\n          });\n          return _context.abrupt(\"return\", {\n            count: count\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}; //inital props\n\n\nexport default Test;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/pages/index.js"],"names":["React","fetch","require","Test","props","count","getInitialProps","context","label","headers","accept","then","res","dataset","quad","predicate","value","console","log","subject","object","err","error"],"mappings":";;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,SAClB,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAK,CAACC,KAAV,CAFJ,CADkB;AAAA,CAAlB;;AASAF,IAAI,CAACG,eAAL,GAAuB,iBAAgBC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,KADa,GACL,uDADK;AAEfH,UAAAA,KAFe,GAEP,CAFO;AAGpBJ,UAAAA,KAAK,CAAC,gDAAD,EAAmD;AACnDQ,YAAAA,OAAO,EAAE;AACLC,cAAAA,MAAM,EAAE;AADH;AAD0C,WAAnD,CAAL,CAIIC,IAJJ,CAIS,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,OAAJ,EAAJ;AAAA,WAJZ,EAKMF,IALN,CAKW,UAAAE,OAAO,EAAI;AAAA,uDACMA,OADN;AAAA;;AAAA;AACb,kEAA4B;AAAA,oBAAjBC,IAAiB;;AACxB,oBAAIA,IAAI,CAACC,SAAL,CAAeC,KAAf,IAAwB,uDAA5B,EAAqF;AACjFC,kBAAAA,OAAO,CAACC,GAAR,WAAeJ,IAAI,CAACK,OAAL,CAAaH,KAA5B,eAAsCF,IAAI,CAACM,MAAL,CAAYJ,KAAlD;AACAX,kBAAAA,KAAK;AACR;AACJ;AANY;AAAA;AAAA;AAAA;AAAA;AAOhB,WAZN,WAaY,UAAAgB,GAAG;AAAA,mBAAIJ,OAAO,CAACK,KAAR,CAAcD,GAAd,CAAJ;AAAA,WAbf;AAHoB,2CAkBZ;AAAChB,YAAAA,KAAK,EAALA;AAAD,WAlBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB,C,CAmBG;;;AACH,eAAeF,IAAf","sourcesContent":["\nimport React from 'react';\nconst fetch = require('@rdfjs/fetch');\nconst Test = props => (\n<React.Fragment>\n    <p>Proov</p>\n    <p>{props.count}</p>\n</React.Fragment>\n\n\n);\n\nTest.getInitialProps = async function (context) {\n    const label = 'http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of'\n    let count = 0;\n   fetch('http://www.muis.ee/rdf/objects-by-museum/34711', {\n        headers: {\n            accept: 'application/rdf+xml'\n        }\n    }).then(res => res.dataset())\n        .then(dataset => {\n            for (const quad of dataset) {\n                if (quad.predicate.value == \"http://www.cidoc-crm.org/cidoc-crm/P46_is_composed_of\") {\n                    console.log(`${quad.subject.value}: ${quad.object.value}`);\n                    count ++;\n                }\n            }\n        })\n        .catch(err => console.error(err));\n\n    return {count};\n}; //inital props\nexport default Test\n"]},"metadata":{},"sourceType":"module"}