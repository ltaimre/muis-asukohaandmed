{"ast":null,"code":"var _jsxFileName = \"/Users/liisitaimre/Documents/hello-next/components/Map.js\";\nvar __jsx = React.createElement;\nimport L from 'leaflet';\nimport fetch from 'isomorphic-unfetch';\nimport React, { Component } from 'react';\nconst elId = 'map';\nconst style = {\n  default: {\n    color: '#0055B8',\n    weight: 1,\n    opacity: 1,\n    fillColor: 'red',\n    fillOpacity: 1\n  },\n  hover: {\n    color: '#0055B8',\n    weight: 4,\n    opacity: .6,\n    fillColor: 'red',\n    fillOpacity: 1\n  },\n  selected: {\n    color: '#0055B8',\n    weight: 1,\n    opacity: 1,\n    fillColor: '#0055B8',\n    fillOpacity: 1\n  }\n};\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  async componentDidMount() {\n    const mapData = await fetch(`/data/maakond.geojson`).then(response => response.json());\n    const mapData2 = await fetch(`/data/kih1922.geojson`).then(response => response.json());\n    const mapData3 = await fetch(`/data/region1922.geojson`).then(response => response.json());\n    const mapData4 = await fetch(`/data/mk.geojson`).then(response => response.json());\n    console.log(mapData);\n    console.log(mapData2);\n    console.log(mapData3);\n    console.log(mapData4);\n    const map = L.map(elId, {\n      attributionControl: false,\n      zoomControl: false,\n      zoomSnap: 0\n    }); // add the OpenStreetMap tiles\n\n    /* L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n         maxZoom: 19,\n         attribution: '&copy; <a href=\"https://openstreetmap.org/copyright\">OpenStreetMap contributors</a>'\n     }).addTo(map);*/\n\n    const myStyle = {\n      \"color\": \"#ff7800\",\n      \"weight\": 5,\n      \"opacity\": 0.65\n    };\n    const myLayer = L.geoJSON(mapData2, {\n      style: myStyle\n    }).addTo(map);\n    map.fitBounds(myLayer.getBounds(), {\n      padding: [0, 0]\n    });\n    /* const layer = L.GeoJSON(mapData, {\n           style: myStyle\n       }).addTo(map);*/\n    // Fit map to bounds of your GeoJSON\n    // map.fitBounds(layer.getBounds())\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        height: 500\n      },\n      id: \"map\",\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 16\n      }\n    });\n  }\n\n  createMap(elId) {\n    // disable drag and zoom handlers\n    map.dragging.disable();\n    map.touchZoom.disable();\n    map.doubleClickZoom.disable();\n    map.scrollWheelZoom.disable();\n    return map;\n  }\n\n  createLayer(id, options) {\n    this.setState({\n      id: id,\n      labelFeatures: options.labels\n    });\n    this.state.layer.clearLayers();\n    this.state.labels.clearLayers();\n    this.load(id).then(response => {\n      const data = Object.assign({}, response);\n\n      if ('filters' in options && options.filters.length) {\n        data.features = data.features.filter(feature => {\n          const valid = [];\n          options.filters.forEach(item => {\n            Object.keys(item).forEach(key => {\n              if (key in feature.properties) {\n                valid.push(feature.properties[key] === item[key]);\n              }\n            });\n          });\n          return valid.indexOf(true) > -1;\n        });\n      }\n\n      if ('selected' in options && options.selected.length) {\n        data.features = data.features.map(feature => {\n          const valid = [];\n          options.selected.forEach(item => {\n            Object.keys(item).forEach(key => {\n              if (key in feature.properties) {\n                valid.push(feature.properties[key] === item[key]);\n              }\n            });\n          });\n\n          if (valid.indexOf(true) > -1) {\n            feature._selected = true;\n          }\n\n          return feature;\n        });\n      }\n\n      this.state.layer.addData(data);\n      this.state.map.fitBounds(this.state.layer.getBounds(), {\n        padding: [0, 0]\n      });\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/liisitaimre/Documents/hello-next/components/Map.js"],"names":["L","fetch","React","Component","elId","style","default","color","weight","opacity","fillColor","fillOpacity","hover","selected","Map","constructor","props","componentDidMount","mapData","then","response","json","mapData2","mapData3","mapData4","console","log","map","attributionControl","zoomControl","zoomSnap","myStyle","myLayer","geoJSON","addTo","fitBounds","getBounds","padding","render","height","createMap","dragging","disable","touchZoom","doubleClickZoom","scrollWheelZoom","createLayer","id","options","setState","labelFeatures","labels","state","layer","clearLayers","load","data","Object","assign","filters","length","features","filter","feature","valid","forEach","item","keys","key","properties","push","indexOf","_selected","addData"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,SAAd;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,MAAMC,IAAI,GAAG,KAAb;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,OAAO,EAAE;AACLC,IAAAA,KAAK,EAAE,SADF;AAELC,IAAAA,MAAM,EAAE,CAFH;AAGLC,IAAAA,OAAO,EAAE,CAHJ;AAILC,IAAAA,SAAS,EAAE,KAJN;AAKLC,IAAAA,WAAW,EAAE;AALR,GADC;AAQVC,EAAAA,KAAK,EAAE;AACHL,IAAAA,KAAK,EAAE,SADJ;AAEHC,IAAAA,MAAM,EAAE,CAFL;AAGHC,IAAAA,OAAO,EAAE,EAHN;AAIHC,IAAAA,SAAS,EAAE,KAJR;AAKHC,IAAAA,WAAW,EAAE;AALV,GARG;AAeVE,EAAAA,QAAQ,EAAE;AACNN,IAAAA,KAAK,EAAE,SADD;AAENC,IAAAA,MAAM,EAAE,CAFF;AAGNC,IAAAA,OAAO,EAAE,CAHH;AAINC,IAAAA,SAAS,EAAE,SAJL;AAKNC,IAAAA,WAAW,EAAE;AALP;AAfA,CAAd;;AAwBA,MAAMG,GAAN,SAAkBX,SAAlB,CAA4B;AACxBY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEH;;AAED,QAAMC,iBAAN,GAA0B;AACtB,UAAMC,OAAO,GAAG,MAAMjB,KAAK,CAAE,uBAAF,CAAL,CAA+BkB,IAA/B,CAAoCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAAhD,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAAE,uBAAF,CAAL,CAA+BkB,IAA/B,CAAoCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAAhD,CAAvB;AACA,UAAME,QAAQ,GAAG,MAAMtB,KAAK,CAAE,0BAAF,CAAL,CAAkCkB,IAAlC,CAAuCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAAnD,CAAvB;AACA,UAAMG,QAAQ,GAAG,MAAMvB,KAAK,CAAE,kBAAF,CAAL,CAA0BkB,IAA1B,CAA+BC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA3C,CAAvB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAMG,GAAG,GAAG3B,CAAC,CAAC2B,GAAF,CAAMvB,IAAN,EAAY;AACpBwB,MAAAA,kBAAkB,EAAE,KADA;AAEpBC,MAAAA,WAAW,EAAE,KAFO;AAGpBC,MAAAA,QAAQ,EAAE;AAHU,KAAZ,CAAZ,CATsB,CAkBtB;;AACD;;;;;AAKC,UAAMC,OAAO,GAAG;AACZ,eAAS,SADG;AAEZ,gBAAU,CAFE;AAGZ,iBAAW;AAHC,KAAhB;AAQA,UAAMC,OAAO,GAAChC,CAAC,CAACiC,OAAF,CAAUX,QAAV,EAAoB;AAC9BjB,MAAAA,KAAK,EAAE0B;AADuB,KAApB,EAEXG,KAFW,CAELP,GAFK,CAAd;AAGAA,IAAAA,GAAG,CAACQ,SAAJ,CAAcH,OAAO,CAACI,SAAR,EAAd,EAAoC;AAACC,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAV,KAApC;AAIH;;;AAGG;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACL,WAAO;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAA4B,MAAA,EAAE,EAAC,KAA/B;AAAqC,MAAA,SAAS,EAAC,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEH;;AAIDC,EAAAA,SAAS,CAACpC,IAAD,EAAO;AAEZ;AACAuB,IAAAA,GAAG,CAACc,QAAJ,CAAaC,OAAb;AACAf,IAAAA,GAAG,CAACgB,SAAJ,CAAcD,OAAd;AACAf,IAAAA,GAAG,CAACiB,eAAJ,CAAoBF,OAApB;AACAf,IAAAA,GAAG,CAACkB,eAAJ,CAAoBH,OAApB;AACA,WAAOf,GAAP;AACH;;AAMDmB,EAAAA,WAAW,CAACC,EAAD,EAAKC,OAAL,EAAc;AACrB,SAAKC,QAAL,CAAc;AACVF,MAAAA,EAAE,EAAEA,EADM;AAEVG,MAAAA,aAAa,EAAEF,OAAO,CAACG;AAFb,KAAd;AAIA,SAAKC,KAAL,CAAWC,KAAX,CAAiBC,WAAjB;AACA,SAAKF,KAAL,CAAWD,MAAX,CAAkBG,WAAlB;AACA,SAAKC,IAAL,CAAUR,EAAV,EACK5B,IADL,CACUC,QAAQ,IAAI;AACd,YAAMoC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtC,QAAlB,CAAb;;AACA,UAAI,aAAa4B,OAAb,IAAwBA,OAAO,CAACW,OAAR,CAAgBC,MAA5C,EAAoD;AAChDJ,QAAAA,IAAI,CAACK,QAAL,GAAgBL,IAAI,CAACK,QAAL,CAAcC,MAAd,CAAqBC,OAAO,IAAI;AAC5C,gBAAMC,KAAK,GAAG,EAAd;AACAhB,UAAAA,OAAO,CAACW,OAAR,CAAgBM,OAAhB,CAAwBC,IAAI,IAAI;AAC5BT,YAAAA,MAAM,CAACU,IAAP,CAAYD,IAAZ,EAAkBD,OAAlB,CAA0BG,GAAG,IAAI;AAC7B,kBAAIA,GAAG,IAAIL,OAAO,CAACM,UAAnB,EAA+B;AAC3BL,gBAAAA,KAAK,CAACM,IAAN,CAAWP,OAAO,CAACM,UAAR,CAAmBD,GAAnB,MAA4BF,IAAI,CAACE,GAAD,CAA3C;AACH;AACJ,aAJD;AAKH,WAND;AAOA,iBAAOJ,KAAK,CAACO,OAAN,CAAc,IAAd,IAAsB,CAAC,CAA9B;AACH,SAVe,CAAhB;AAWH;;AACD,UAAI,cAAcvB,OAAd,IAAyBA,OAAO,CAACnC,QAAR,CAAiB+C,MAA9C,EAAsD;AAClDJ,QAAAA,IAAI,CAACK,QAAL,GAAgBL,IAAI,CAACK,QAAL,CAAclC,GAAd,CAAkBoC,OAAO,IAAI;AACzC,gBAAMC,KAAK,GAAG,EAAd;AACAhB,UAAAA,OAAO,CAACnC,QAAR,CAAiBoD,OAAjB,CAAyBC,IAAI,IAAI;AAC7BT,YAAAA,MAAM,CAACU,IAAP,CAAYD,IAAZ,EAAkBD,OAAlB,CAA0BG,GAAG,IAAI;AAC7B,kBAAIA,GAAG,IAAIL,OAAO,CAACM,UAAnB,EAA+B;AAC3BL,gBAAAA,KAAK,CAACM,IAAN,CAAWP,OAAO,CAACM,UAAR,CAAmBD,GAAnB,MAA4BF,IAAI,CAACE,GAAD,CAA3C;AACH;AACJ,aAJD;AAKH,WAND;;AAOA,cAAIJ,KAAK,CAACO,OAAN,CAAc,IAAd,IAAsB,CAAC,CAA3B,EAA8B;AAC1BR,YAAAA,OAAO,CAACS,SAAR,GAAoB,IAApB;AACH;;AACD,iBAAOT,OAAP;AACH,SAbe,CAAhB;AAcH;;AACD,WAAKX,KAAL,CAAWC,KAAX,CAAiBoB,OAAjB,CAAyBjB,IAAzB;AACA,WAAKJ,KAAL,CAAWzB,GAAX,CAAeQ,SAAf,CAAyB,KAAKiB,KAAL,CAAWC,KAAX,CAAiBjB,SAAjB,EAAzB,EAAuD;AAACC,QAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAV,OAAvD;AACH,KAlCL;AAmCH;;AAnHuB;;AAuH5B,eAAevB,GAAf","sourcesContent":["import L from 'leaflet'\nimport fetch from 'isomorphic-unfetch'\nimport React, { Component } from 'react'\n\nconst elId = 'map'\n\nconst style = {\n    default: {\n        color: '#0055B8',\n        weight: 1,\n        opacity: 1,\n        fillColor: 'red',\n        fillOpacity: 1\n    },\n    hover: {\n        color: '#0055B8',\n        weight: 4,\n        opacity: .6,\n        fillColor: 'red',\n        fillOpacity: 1\n    },\n    selected: {\n        color: '#0055B8',\n        weight: 1,\n        opacity: 1,\n        fillColor: '#0055B8',\n        fillOpacity: 1\n    }\n}\n\nclass Map extends Component {\n    constructor(props) {\n        super(props)\n\n    }\n\n    async componentDidMount() {\n        const mapData = await fetch(`/data/maakond.geojson`).then(response => response.json());\n        const mapData2 = await fetch(`/data/kih1922.geojson`).then(response => response.json());\n        const mapData3 = await fetch(`/data/region1922.geojson`).then(response => response.json());\n        const mapData4 = await fetch(`/data/mk.geojson`).then(response => response.json());\n        console.log(mapData);\n        console.log(mapData2);\n        console.log(mapData3);\n        console.log(mapData4);\n        const map = L.map(elId, {\n            attributionControl: false,\n            zoomControl: false,\n            zoomSnap: 0\n        });\n\n\n\n\n        // add the OpenStreetMap tiles\n       /* L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            maxZoom: 19,\n            attribution: '&copy; <a href=\"https://openstreetmap.org/copyright\">OpenStreetMap contributors</a>'\n        }).addTo(map);*/\n\n        const myStyle = {\n            \"color\": \"#ff7800\",\n            \"weight\": 5,\n            \"opacity\": 0.65\n        };\n\n\n\n        const myLayer=L.geoJSON(mapData2, {\n            style: myStyle\n        }).addTo(map);\n        map.fitBounds(myLayer.getBounds(),  {padding: [0, 0]});\n\n\n\n     /* const layer = L.GeoJSON(mapData, {\n            style: myStyle\n        }).addTo(map);*/\n        // Fit map to bounds of your GeoJSON\n       // map.fitBounds(layer.getBounds())\n    }\n\n    render() {\n        return <div style={{height: 500 }} id=\"map\" className=\"map\">\n        </div>\n    }\n\n\n\n    createMap(elId) {\n\n        // disable drag and zoom handlers\n        map.dragging.disable()\n        map.touchZoom.disable()\n        map.doubleClickZoom.disable()\n        map.scrollWheelZoom.disable()\n        return map\n    }\n\n\n\n\n\n    createLayer(id, options) {\n        this.setState({\n            id: id,\n            labelFeatures: options.labels\n        })\n        this.state.layer.clearLayers()\n        this.state.labels.clearLayers()\n        this.load(id)\n            .then(response => {\n                const data = Object.assign({}, response)\n                if ('filters' in options && options.filters.length) {\n                    data.features = data.features.filter(feature => {\n                        const valid = []\n                        options.filters.forEach(item => {\n                            Object.keys(item).forEach(key => {\n                                if (key in feature.properties) {\n                                    valid.push(feature.properties[key] === item[key])\n                                }\n                            })\n                        })\n                        return valid.indexOf(true) > -1\n                    })\n                }\n                if ('selected' in options && options.selected.length) {\n                    data.features = data.features.map(feature => {\n                        const valid = []\n                        options.selected.forEach(item => {\n                            Object.keys(item).forEach(key => {\n                                if (key in feature.properties) {\n                                    valid.push(feature.properties[key] === item[key])\n                                }\n                            })\n                        })\n                        if (valid.indexOf(true) > -1) {\n                            feature._selected = true\n                        }\n                        return feature\n                    })\n                }\n                this.state.layer.addData(data)\n                this.state.map.fitBounds(this.state.layer.getBounds(), {padding: [0, 0]})\n            })\n    }\n\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}